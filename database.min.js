function escapeSpecialChars(e){return e.replace(/[áàãâäéèêëíìîïóòõôöúùûüçÁÀÃÂÄÉÈÊËÍÌÎÏÓÒÕÔÖÚÙÛÜÇ'"\\-]/g,e=>{const a={"á":"\\á","à":"\\à","ã":"\\ã","â":"\\â","ä":"\\ä","é":"\\é","è":"\\è","ê":"\\ê","ë":"\\ë","í":"\\í","ì":"\\ì","î":"\\î","ï":"\\ï","ó":"\\ó","ò":"\\ò","õ":"\\õ","ô":"\\ô","ö":"\\ö","ú":"\\ú","ù":"\\ù","û":"\\û","ü":"\\ü","ç":"\\ç","Á":"\\Á","À":"\\À","Ã":"\\Ã","Â":"\\Â","Ä":"\\Ä","É":"\\É","È":"\\È","Ê":"\\Ê","Ë":"\\Ë","Í":"\\Í","Ì":"\\Ì","Î":"\\Î","Ï":"\\Ï","Ó":"\\Ó","Ò":"\\Ò","Õ":"\\Õ","Ô":"\\Ô","Ö":"\\Ö","Ú":"\\Ú","Ù":"\\Ù","Û":"\\Û","Ü":"\\Ü","Ç":"\\Ç","'":"\\'",'"':'\\"',"\\":"\\\\","-":"\\-"};return a[e]||e})}function unescapeSpecialChars(e){return e.replace(/\\([áàãâäéèêëíìîïóòõôöúùûüçÁÀÃÂÄÉÈÊËÍÌÎÏÓÒÕÔÖÚÙÛÜÇ'"\\-])/g,(e,a)=>a)}import dotenv from"dotenv";import mysql from"mysql2";dotenv.config();const env=process.env,pool=mysql.createPool({host:env.DB_HOST,port:env.DB_PORT,user:env.DB_USER,password:env.DB_PASSWORD,database:env.DB_NAME}).promise();export async function createUsuario(e,a,o){const r=escapeSpecialChars(e),t=a.map(e=>escapeSpecialChars(e)),i=o.map(e=>escapeSpecialChars(e)),[n]=await pool.query("SELECT email FROM Usuario"),[s]=await pool.query("SELECT telefone FROM Usuario"),c=n.flatMap(e=>JSON.parse(e.email)),p=s.flatMap(e=>JSON.parse(e.telefone)),u=t.filter(e=>!c.includes(e)),l=i.filter(e=>!p.includes(e)),E=JSON.stringify(u),S=JSON.stringify(l),[y]=await pool.query("INSERT INTO Usuario (nome, email, telefone) VALUES (?, ?, ?)",[r,E,S]);return y}export async function getUsuarios(){const[e]=await pool.query("SELECT * FROM Usuario");return e.map(e=>({...e,nome:unescapeSpecialChars(e.nome),email:JSON.parse(e.email).map(e=>unescapeSpecialChars(e)),telefone:JSON.parse(e.telefone).map(e=>unescapeSpecialChars(e))}))}export async function getUsuarioById(e){const[a]=await pool.query("SELECT * FROM Usuario WHERE usuario_id = ?",[e]);return a[0]?{...a[0],nome:unescapeSpecialChars(a[0].nome),email:JSON.parse(a[0].email).map(e=>unescapeSpecialChars(e)),telefone:JSON.parse(a[0].telefone).map(e=>unescapeSpecialChars(e))}:null}export async function updateUsuario(e,a,o,r){const t=escapeSpecialChars(a),i=o.map(e=>escapeSpecialChars(e)),n=r.map(e=>escapeSpecialChars(e)),[s]=await pool.query("SELECT email FROM Usuario WHERE usuario_id != ?",[e]),[c]=await pool.query("SELECT telefone FROM Usuario WHERE usuario_id != ?",[e]),p=s.flatMap(e=>JSON.parse(e.email)),u=c.flatMap(e=>JSON.parse(e.telefone)),l=i.filter(e=>!p.includes(e)),E=n.filter(e=>!u.includes(e)),S=JSON.stringify(l),y=JSON.stringify(E),[m]=await pool.query("UPDATE Usuario SET nome = ?, email = ?, telefone = ? WHERE usuario_id = ?",[t,S,y,e]);return m}export async function deleteUsuario(e){const[a]=await pool.query("DELETE FROM Usuario WHERE usuario_id = ?",[e]);return a}export async function createCategoria(e){const a=escapeSpecialChars(e),[o]=await pool.query("INSERT INTO Categoria (nome) VALUES (?)",[a]);return o}export async function getCategorias(){const[e]=await pool.query("SELECT * FROM Categoria");return e.map(e=>({...e,nome:unescapeSpecialChars(e.nome)}))}export async function getCategoriaById(e){const[a]=await pool.query("SELECT * FROM Categoria WHERE categoria_id = ?",[e]);return a[0]?{...a[0],nome:unescapeSpecialChars(a[0].nome)}:null}export async function updateCategoria(e,a){const o=escapeSpecialChars(a),[r]=await pool.query("UPDATE Categoria SET nome = ? WHERE categoria_id = ?",[o,e]);return r}export async function deleteCategoria(e){const[a]=await pool.query("DELETE FROM Categoria WHERE categoria_id = ?",[e]);return a}export async function createAutor(e,a){const o=escapeSpecialChars(e),r=escapeSpecialChars(a),[t]=await pool.query("INSERT INTO Autor (nome, nacionalidade) VALUES (?, ?)",[o,r]);return t}export async function getAutores(){const[e]=await pool.query("SELECT * FROM Autor");return e.map(e=>({...e,nome:unescapeSpecialChars(e.nome),nacionalidade:unescapeSpecialChars(e.nacionalidade)}))}export async function getAutorById(e){const[a]=await pool.query("SELECT * FROM Autor WHERE autor_id = ?",[e]);return a[0]?{...a[0],nome:unescapeSpecialChars(a[0].nome),nacionalidade:unescapeSpecialChars(a[0].nacionalidade)}:null}export async function updateAutor(e,a,o){const r=escapeSpecialChars(a),t=escapeSpecialChars(o),[i]=await pool.query("UPDATE Autor SET nome = ?, nacionalidade = ? WHERE autor_id = ?",[r,t,e]);return i}export async function deleteAutor(e){const[a]=await pool.query("DELETE FROM Autor WHERE autor_id = ?",[e]);return a}export async function createLivro(e,a,o,r){const t=escapeSpecialChars(e),i=escapeSpecialChars(o),[n]=await pool.query("INSERT INTO Livro (titulo, ano_publicacao, editora, categoria_id) VALUES (?, ?, ?, ?)",[t,a,i,r]);return n}export async function getLivros(){const[e]=await pool.query("SELECT * FROM Livro");return e.map(e=>({...e,titulo:unescapeSpecialChars(e.titulo),editora:unescapeSpecialChars(e.editora)}))}export async function getLivroById(e){const[a]=await pool.query("SELECT * FROM Livro WHERE livro_id = ?",[e]);return a[0]?{...a[0],titulo:unescapeSpecialChars(a[0].titulo),editora:unescapeSpecialChars(a[0].editora)}:null}export async function updateLivro(e,a,o,r,t){const i=escapeSpecialChars(a),n=escapeSpecialChars(r),[s]=await pool.query("UPDATE Livro SET titulo = ?, ano_publicacao = ?, editora = ?, categoria_id = ? WHERE livro_id = ?",[i,o,n,t,e]);return s}export async function deleteLivro(e){const[a]=await pool.query("DELETE FROM Livro WHERE livro_id = ?",[e]);return a}export async function createReserva(e,a){const[o]=await pool.query("INSERT INTO Reserva (usuario_id, livro_id) VALUES (?, ?)",[e,a]);return o}export async function getReservas(){const[e]=await pool.query("SELECT * FROM Reserva");return e}export async function getReservaById(e){const[a]=await pool.query("SELECT * FROM Reserva WHERE reserva_id = ?",[e]);return a[0]}export async function updateReservaStatus(e,a){const o=escapeSpecialChars(a),[r]=await pool.query("UPDATE Reserva SET status = ? WHERE reserva_id = ?",[o,e]);return r}export async function deleteReserva(e){const[a]=await pool.query("DELETE FROM Reserva WHERE reserva_id = ?",[e]);return a}export async function createEmprestimo(e,a,o){const[r]=await pool.query("INSERT INTO Emprestimo (reserva_id, data_emprestimo, data_devolucao_prevista) VALUES (?, ?, ?)",[e,a,o]);return r}export async function getEmprestimos(){const[e]=await pool.query("SELECT * FROM Emprestimo");return e}export async function getEmprestimoById(e){const[a]=await pool.query("SELECT * FROM Emprestimo WHERE emprestimo_id = ?",[e]);return a[0]}export async function updateEmprestimoDevolucao(e,a){const[o]=await pool.query("UPDATE Emprestimo SET data_devolucao_real = ? WHERE emprestimo_id = ?",[a,e]);return o}export async function deleteEmprestimo(e){const[a]=await pool.query("DELETE FROM Emprestimo WHERE emprestimo_id = ?",[e]);return a}